FUNCTION  <SNR>27_rooter()
    Defined: ~/.local/share/nvim/lazy/vim-rooter/plugin/rooter.vim:72
Called 1 time
Total time:   0.000101
 Self time:   0.000031

count  total (s)   self (s)
    1   0.000061   0.000009   if !s:activate() | return | endif
                            
    1              0.000002   let bufnr = a:0 ? a:1 : '%'
                            
    1              0.000003   let root = getbufvar(bufnr, 'rootDir')
    1              0.000001   if empty(root)
                                let root = s:root()
                                call setbufvar(bufnr, 'rootDir', root)
    1              0.000000   endif
                            
    1              0.000001   if empty(root)
                                call s:rootless()
                                return
    1              0.000000   endif
                            
    1   0.000025   0.000007   call s:cd(root)

FUNCTION  <SNR>75_SynSet()
    Defined: /usr/local/share/nvim/runtime/syntax/synload.vim:27
Called 7 times
Total time:   0.017927
 Self time:   0.017927

count  total (s)   self (s)
                              " clear syntax for :set syntax=OFF  and any syntax name that doesn't exist
    7              0.000026   syn clear
    7              0.000014   if exists("b:current_syntax")
                                unlet b:current_syntax
    7              0.000003   endif
                            
    7              0.000017   0verbose let s = expand("<amatch>")
    7              0.000009   if s == "ON"
                                " :set syntax=ON
                                if &filetype == ""
                                  echohl ErrorMsg
                                  echo "filetype unknown"
                                  echohl None
                                endif
                                let s = &filetype
    7              0.000007   elseif s == "OFF"
                                let s = ""
    7              0.000003   endif
                            
    7              0.000006   if s != ""
                                " Load the syntax file(s).  When there are several, separated by dots,
                                " load each in sequence.  Skip empty entries.
   14              0.000032     for name in split(s, '\.')
    7              0.000011       if !empty(name)
                                    " XXX: "[.]" in the first pattern makes it a wildcard on Windows
    7              0.017660         exe $'runtime! syntax/{name}[.]{{vim,lua}} syntax/{name}/*.{{vim,lua}}'
    7              0.000006       endif
   14              0.000011     endfor
    7              0.000004   endif

FUNCTION  <SNR>76_Running()
    Defined: ~/.local/share/nvim/lazy/copilot.vim/autoload/copilot.vim:41
Called 2 times
Total time:   0.000009
 Self time:   0.000009

count  total (s)   self (s)
    2              0.000008   return exists('s:agent.job') || exists('s:agent.client_id')

FUNCTION  <SNR>79_NvimIsAttached()
    Defined: ~/.local/share/nvim/lazy/copilot.vim/autoload/copilot/agent.vim:401
Called 1 time
Total time:   0.000051
 Self time:   0.000051

count  total (s)   self (s)
    1              0.000050   return bufloaded(a:bufnr) ? luaeval('vim.lsp.buf_is_attached(_A[1], _A[2])', [a:bufnr, self.id]) : v:false

FUNCTION  copilot#Agent()
    Defined: ~/.local/share/nvim/lazy/copilot.vim/autoload/copilot.vim:63
Called 1 time
Total time:   0.000032
 Self time:   0.000006

count  total (s)   self (s)
    1   0.000031   0.000004   call s:Start()
    1              0.000001   return s:agent

FUNCTION  <SNR>27_cd()
    Defined: ~/.local/share/nvim/lazy/vim-rooter/plugin/rooter.vim:233
Called 1 time
Total time:   0.000018
 Self time:   0.000018

count  total (s)   self (s)
    1              0.000018   if a:dir == getcwd() | return | endif
                              execute g:rooter_cd_cmd fnameescape(a:dir)
                              if !g:rooter_silent_chdir | redraw | echo 'cwd: '.a:dir | endif
                              if exists('#User#RooterChDir')
                                execute 'doautocmd' s:nomodeline 'User RooterChDir'
                              endif

FUNCTION  copilot#OnVimLeavePre()
    Defined: ~/.local/share/nvim/lazy/copilot.vim/autoload/copilot.vim:468
Called 1 time
Total time:   0.000000
 Self time:   0.000000

count  total (s)   self (s)

FUNCTION  <SNR>76_Start()
    Defined: ~/.local/share/nvim/lazy/copilot.vim/autoload/copilot.vim:45
Called 1 time
Total time:   0.000027
 Self time:   0.000023

count  total (s)   self (s)
    1   0.000026   0.000022   if s:Running()
    1              0.000001     return
                              endif
                              let s:agent = copilot#agent#New({'methods': { 'PanelSolution': function('copilot#panel#Solution'), 'PanelSolutionsDone': function('copilot#panel#SolutionsDone'), }, 'editorConfiguration' : s:EditorConfiguration()})

FUNCTION  copilot#OnFileType()
    Defined: ~/.local/share/nvim/lazy/copilot.vim/autoload/copilot.vim:427
Called 7 times
Total time:   0.000499
 Self time:   0.000119

count  total (s)   self (s)
    7   0.000468   0.000087   if empty(s:BufferDisabled()) && &l:modifiable && &l:buflisted
                                call copilot#util#Defer(function('s:Attach'), bufnr(''))
    7              0.000003   endif

FUNCTION  <SNR>34_Event()
    Defined: ~/.local/share/nvim/lazy/copilot.vim/plugin/copilot.vim:45
Called 55 times
Total time:   0.001565
 Self time:   0.001023

count  total (s)   self (s)
   55              0.000070   try
   55   0.001177   0.000635     call call('copilot#On' . a:type, [])
                              catch
                                call copilot#logger#Exception('autocmd.' . a:type)
   55              0.000067   endtry

FUNCTION  <SNR>76_Focus()
    Defined: ~/.local/share/nvim/lazy/copilot.vim/autoload/copilot.vim:433
Called 1 time
Total time:   0.000110
 Self time:   0.000022

count  total (s)   self (s)
    1   0.000105   0.000017   if s:Running() && copilot#Agent().IsAttached(a:bufnr)
                                call copilot#Agent().Notify('textDocument/didFocus', {'textDocument': {'uri': copilot#Agent().Attach(a:bufnr).uri}})
    1              0.000001   endif

FUNCTION  <SNR>44_vm_persist()
    Defined: ~/.local/share/nvim/lazy/vim-visual-multi/plugin/visual-multi.vim:82
Called 1 time
Total time:   0.000009
 Self time:   0.000009

count  total (s)   self (s)
    1              0.000003   if exists('g:VM_PERSIST') && !g:VM_persistent_registers
                                unlet g:VM_PERSIST
    1              0.000001   elseif g:VM_persistent_registers
                                let g:VM_PERSIST = deepcopy(g:Vm.registers)
    1              0.000000   endif

FUNCTION  copilot#OnBufUnload()
    Defined: ~/.local/share/nvim/lazy/copilot.vim/autoload/copilot.vim:465
Called 46 times
Total time:   0.000018
 Self time:   0.000018

count  total (s)   self (s)

FUNCTION  <SNR>27_activate()
    Defined: ~/.local/share/nvim/lazy/vim-rooter/plugin/rooter.vim:98
Called 1 time
Total time:   0.000052
 Self time:   0.000052

count  total (s)   self (s)
    1              0.000006   if index(g:rooter_buftypes, &buftype) == -1 | return 0 | endif
                            
    1              0.000007   let patterns = split(g:rooter_targets, ',')
    1              0.000022   let fn = expand('%:p', 1)
                            
    1              0.000009   if fn =~ 'NERD_tree_\d\+$' | let fn = b:NERDTree.root.path.str().'/' | endif
                            
                              " directory
    1              0.000003   if empty(fn) || isdirectory(fn)
    1              0.000002     return index(patterns, '/') != -1
                              endif
                            
                              " file
                              if !filereadable(fn) | return 0 | endif
                              if !exists('*glob2regpat') | return 1 | endif
                            
                              for p in filter(copy(patterns), 'v:val != "/"')
                                if fn =~ glob2regpat(p)
                                  return 1
                                endif
                              endfor
                            
                              return 0

FUNCTION  <SNR>1_LoadFTPlugin()
    Defined: /usr/local/share/nvim/runtime/ftplugin.vim:15
Called 7 times
Total time:   0.030558
 Self time:   0.030558

count  total (s)   self (s)
    7              0.000050     if exists("b:undo_ftplugin")
                                  exe b:undo_ftplugin
                                  unlet! b:undo_ftplugin b:did_ftplugin
    7              0.000008     endif
                            
    7              0.000044     let s = expand("<amatch>")
    7              0.000018     if s != ""
    7              0.000051       if &cpo =~# "S" && exists("b:did_ftplugin")
                            	" In compatible mode options are reset to the global values, need to
                            	" set the local values also when a plugin was already used.
                            	unlet b:did_ftplugin
    7              0.000004       endif
                            
                                  " When there is a dot it is used to separate filetype names.  Thus for
                                  " "aaa.bbb" load "aaa" and then "bbb".
   14              0.000059       for name in split(s, '\.')
                                    " Load Lua ftplugins after Vim ftplugins _per directory_
                                    " TODO(clason): use nvim__get_runtime when supports globs and modeline
                                    " XXX: "[.]" in the first pattern makes it a wildcard on Windows
    7              0.030175         exe $'runtime! ftplugin/{name}[.]{{vim,lua}} ftplugin/{name}_*.{{vim,lua}} ftplugin/{name}/*.{{vim,lua}}'
   14              0.000025       endfor
    7              0.000005     endif

FUNCTION  <SNR>77_RunDeferred()
    Defined: ~/.local/share/nvim/lazy/copilot.vim/autoload/copilot/util.vim:8
Called 2 times
Total time:   0.000140
 Self time:   0.000029

count  total (s)   self (s)
    2              0.000007   if empty(s:deferred)
    1              0.000001     return
    1              0.000001   endif
    1              0.000005   let Fn = remove(s:deferred, 0)
    1              0.000007   call timer_start(0, function('s:RunDeferred'))
    1   0.000116   0.000006   call call(Fn, [])

FUNCTION  copilot#OnBufEnter()
    Defined: ~/.local/share/nvim/lazy/copilot.vim/autoload/copilot.vim:439
Called 1 time
Total time:   0.000025
 Self time:   0.000013

count  total (s)   self (s)
    1              0.000002   let bufnr = bufnr('')
    1   0.000022   0.000011   call copilot#util#Defer(function('s:Focus'), bufnr)

FUNCTION  <SNR>2_LoadIndent()
    Defined: /usr/local/share/nvim/runtime/indent.vim:14
Called 7 times
Total time:   0.008082
 Self time:   0.008082

count  total (s)   self (s)
    7              0.000026     if exists("b:undo_indent")
                                  exe b:undo_indent
                                  unlet! b:undo_indent b:did_indent
    7              0.000004     endif
    7              0.000021     let s = expand("<amatch>")
    7              0.000010     if s != ""
    7              0.000012       if exists("b:did_indent")
                            	unlet b:did_indent
    7              0.000004       endif
                            
                                  " When there is a dot it is used to separate filetype names.  Thus for
                                  " "aaa.bbb" load "indent/aaa.vim" and then "indent/bbb.vim".
   14              0.000037       for name in split(s, '\.')
                                    " XXX: "[.]" in the pattern makes it a wildcard on Windows
    7              0.007887         exe $'runtime! indent/{name}[.]{{vim,lua}}'
   14              0.000015       endfor
    7              0.000004     endif

FUNCTION  copilot#util#Defer()
    Defined: ~/.local/share/nvim/lazy/copilot.vim/autoload/copilot/util.vim:3
Called 1 time
Total time:   0.000011
 Self time:   0.000011

count  total (s)   self (s)
    1              0.000005   call add(s:deferred, function(a:fn, a:000))
    1              0.000006   return timer_start(0, function('s:RunDeferred'))

FUNCTION  <SNR>76_BufferDisabled()
    Defined: ~/.local/share/nvim/lazy/copilot.vim/autoload/copilot.vim:148
Called 7 times
Total time:   0.000380
 Self time:   0.000380

count  total (s)   self (s)
    7              0.000063   if &buftype =~# '^\%(help\|prompt\|quickfix\|terminal\)$'
                                return 5
    7              0.000004   endif
    7              0.000015   if exists('b:copilot_disabled')
                                return empty(b:copilot_disabled) ? 0 : 3
    7              0.000003   endif
    7              0.000011   if exists('b:copilot_enabled')
                                return empty(b:copilot_enabled) ? 4 : 0
    7              0.000002   endif
    7              0.000053   let short = empty(&l:filetype) ? '.' : split(&l:filetype, '\.', 1)[0]
    7              0.000017   let config = {}
    7              0.000034   if type(get(g:, 'copilot_filetypes')) == v:t_dict
    7              0.000016     let config = g:copilot_filetypes
    7              0.000003   endif
    7              0.000018   if has_key(config, &l:filetype)
                                return empty(config[&l:filetype])
    7              0.000014   elseif has_key(config, short)
                                return empty(config[short])
    7              0.000009   elseif has_key(config, '*')
                                return empty(config['*'])
    7              0.000004   else
    7              0.000024     return get(s:filetype_defaults, short, 1) == 0 ? 2 : 0
                              endif

FUNCTIONS SORTED ON TOTAL TIME
count  total (s)   self (s)  function
    7   0.030558             <SNR>1_LoadFTPlugin()
    7   0.017927             <SNR>75_SynSet()
    7   0.008082             <SNR>2_LoadIndent()
   55   0.001565   0.001023  <SNR>34_Event()
    7   0.000499   0.000119  copilot#OnFileType()
    7   0.000380             <SNR>76_BufferDisabled()
    2   0.000140   0.000029  <SNR>77_RunDeferred()
    1   0.000110   0.000022  <SNR>76_Focus()
    1   0.000101   0.000031  <SNR>27_rooter()
    1   0.000052             <SNR>27_activate()
    1   0.000051             <SNR>79_NvimIsAttached()
    1   0.000032   0.000006  copilot#Agent()
    1   0.000027   0.000023  <SNR>76_Start()
    1   0.000025   0.000013  copilot#OnBufEnter()
    1   0.000018             <SNR>27_cd()
   46   0.000018             copilot#OnBufUnload()
    1   0.000011             copilot#util#Defer()
    1   0.000009             <SNR>44_vm_persist()
    2   0.000009             <SNR>76_Running()
    1   0.000000             copilot#OnVimLeavePre()

FUNCTIONS SORTED ON SELF TIME
count  total (s)   self (s)  function
    7              0.030558  <SNR>1_LoadFTPlugin()
    7              0.017927  <SNR>75_SynSet()
    7              0.008082  <SNR>2_LoadIndent()
   55   0.001565   0.001023  <SNR>34_Event()
    7              0.000380  <SNR>76_BufferDisabled()
    7   0.000499   0.000119  copilot#OnFileType()
    1              0.000052  <SNR>27_activate()
    1              0.000051  <SNR>79_NvimIsAttached()
    1   0.000101   0.000031  <SNR>27_rooter()
    2   0.000140   0.000029  <SNR>77_RunDeferred()
    1   0.000027   0.000023  <SNR>76_Start()
    1   0.000110   0.000022  <SNR>76_Focus()
    1              0.000018  <SNR>27_cd()
   46              0.000018  copilot#OnBufUnload()
    1   0.000025   0.000013  copilot#OnBufEnter()
    1              0.000011  copilot#util#Defer()
    1              0.000009  <SNR>44_vm_persist()
    2              0.000009  <SNR>76_Running()
    1   0.000032   0.000006  copilot#Agent()
    1              0.000000  copilot#OnVimLeavePre()

